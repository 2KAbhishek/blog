<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Developer on 2KAbhishek Blogs</title><link>https://2kabhishek.github.io/blog/tags/developer/</link><description>Recent content in Developer on 2KAbhishek Blogs</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>iam2kabhishek@gmail.com (2KAbhishek)</managingEditor><webMaster>iam2kabhishek@gmail.com (2KAbhishek)</webMaster><copyright>2KAbhishek</copyright><lastBuildDate>Fri, 28 Oct 2022 00:10:46 +0530</lastBuildDate><atom:link href="https://2kabhishek.github.io/blog/tags/developer/index.xml" rel="self" type="application/rss+xml"/><item><title>Data Structure and Algorithms are Overrated! 🚫🪴</title><link>https://2kabhishek.github.io/blog/post/dsa-is-overrated/</link><pubDate>Fri, 28 Oct 2022 00:10:46 +0530</pubDate><author>iam2kabhishek@gmail.com (2KAbhishek)</author><guid>https://2kabhishek.github.io/blog/post/dsa-is-overrated/</guid><description>&lt;h2 id="-dsa-is-overrated-"&gt;🚫 DSA is OVERRATED!! 🚫&lt;/h2&gt;
&lt;p&gt;I recently saw some posts on LinkedIn and Twitter about how a 1% decrease in load time increased revenues for a company.&lt;/p&gt;
&lt;p&gt;Sure, I agree, we all want fast software. 🚀&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the thing though,
One can build fast and robust software without spending 1000 hours on Data Structure and Algorithms. ✨&lt;/p&gt;
&lt;p&gt;Believing that crazy DSA skills are needed for optimizing software is just not right, any good developer will look at 20 other things before even thinking about runtime complexity.&lt;/p&gt;
&lt;p&gt;Sure the skills you learn from slogging DSA for hundreds of hours will help you write better software, but is spending all of that time really worth it? 🤔&lt;/p&gt;
&lt;p&gt;It just doesn&amp;rsquo;t make sense to have your potential teammate spend so much time on something that a $10 Copilot license or a quick Google search can do for you.&lt;/p&gt;</description></item><item><title>Five Git Tricks To Make Dev Work Easier ⛑️🤹🏼</title><link>https://2kabhishek.github.io/blog/post/five-git-tricks/</link><pubDate>Tue, 14 Jun 2022 00:10:46 +0530</pubDate><author>iam2kabhishek@gmail.com (2KAbhishek)</author><guid>https://2kabhishek.github.io/blog/post/five-git-tricks/</guid><description>&lt;p&gt;Git is the most widely used version control system in the world, and it is something that every Software Craftsperson should master.&lt;/p&gt;
&lt;p&gt;In this article, we&amp;rsquo;ll be going through five git tricks that will make your software crafting easier.&lt;/p&gt;
&lt;p&gt;Here are the tricks we&amp;rsquo;ll be covering in this article:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="#quickly-set-up-git-ssh-credentials-with-github-cli"&gt;Quickly set up Git SSH credentials with GitHub CLI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#create-a-new-branch-and-track-it-with-remote"&gt;Create a new branch and track it with remote&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#quickly-test-changes-across-branches-with-the-help-of-stash"&gt;Quickly test changes across branches with the help of stash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#split-one-large-branch-into-multiple"&gt;Split one large branch into multiple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#delete-a-branch-from-remote"&gt;Delete a branch from remote&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="quickly-set-up-git-ssh-credentials-with-github-cli"&gt;Quickly set up Git SSH credentials with GitHub CLI&lt;/h2&gt;
&lt;p&gt;The first thing you want to do before trying out these tricks is to set up &lt;code&gt;git&lt;/code&gt; and its credentials.&lt;/p&gt;
&lt;p&gt;If you have set up git with ssh credentials earlier then you definitely know how cumbersome the entire process can be, for those who are unaware here&amp;rsquo;s a very brief overview:&lt;/p&gt;</description></item><item><title>Sync Forked Repository With Upstream 🔁✔️</title><link>https://2kabhishek.github.io/blog/post/sync-forked-repository/</link><pubDate>Sun, 07 Jun 2020 13:24:00 +0530</pubDate><author>iam2kabhishek@gmail.com (2KAbhishek)</author><guid>https://2kabhishek.github.io/blog/post/sync-forked-repository/</guid><description>&lt;p&gt;Here&amp;rsquo;s the situation, You have forked a repository on GitHub, you have made your changes and sent a pull request, and that request has been merged.&lt;/p&gt;
&lt;p&gt;Now you want to make further changes, but the repository mentions that you are X commits ahead or/and X commits behind upstream repository.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So how do you sync it?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can delete your fork and fork the original repository again, but that is a very tedious thing to do.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s another way to do this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Clone your fork&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git clone https://github.com/yourname/repo.git
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cd yourname/repo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="2"&gt;
&lt;li&gt;Add upstream remote&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git remote add upstream https://github.com/original-author/repo.git
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git fetch upstream
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="3"&gt;
&lt;li&gt;Ignore all changes in fork and sync with upstream&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git reset --hard upstream/master
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git push -f origin master
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Only do this if you have no changes on your fork that you would like to keep.
This will set your fork&amp;rsquo;s master to be the same as upstream&amp;rsquo;s master.
Now you are free to make any changes you wish to make.&lt;/p&gt;</description></item></channel></rss>