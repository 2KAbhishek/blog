<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Productivity on 2KAbhishek Blogs</title><link>https://2kabhishek.github.io/blog/tags/productivity/</link><description>Recent content in Productivity on 2KAbhishek Blogs</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>iam2kabhishek@gmail.com (2KAbhishek)</managingEditor><webMaster>iam2kabhishek@gmail.com (2KAbhishek)</webMaster><copyright>©2023 2KAbhishek</copyright><lastBuildDate>Sat, 02 Nov 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://2kabhishek.github.io/blog/tags/productivity/index.xml" rel="self" type="application/rss+xml"/><item><title>Useful Shell Functions for Developers</title><link>https://2kabhishek.github.io/blog/useful-shell-functions/</link><pubDate>Sat, 02 Nov 2024 00:00:00 +0000</pubDate><author>iam2kabhishek@gmail.com (2KAbhishek)</author><guid>https://2kabhishek.github.io/blog/useful-shell-functions/</guid><description>&lt;p>A well-crafted shell function can be a game changer for developer productivity.
These functions streamline repetitive tasks directly in the terminal, avoiding context switches and speeding up common workflows.&lt;/p>
&lt;p>I recently introduced a few of these functions to my setup, and they’ve been invaluable.
Here’s a rundown of each one, with descriptions of the tools you’ll need and how each function fits into a developer’s workflow.&lt;/p>
&lt;h3 id="tools-youll-need">Tools You’ll Need&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>&lt;code>fzf&lt;/code>&lt;/strong>: Fuzzy finder for quick file and string searches.&lt;/li>
&lt;li>&lt;strong>&lt;code>rg&lt;/code>&lt;/strong>: A fast, versatile text search tool.&lt;/li>
&lt;li>&lt;strong>&lt;code>git&lt;/code>&lt;/strong> and &lt;strong>&lt;code>gh&lt;/code>&lt;/strong>: For version control and GitHub interactions.&lt;/li>
&lt;li>&lt;strong>&lt;code>delta&lt;/code>&lt;/strong>: A syntax-highlighting pager for diffs.&lt;/li>
&lt;li>&lt;strong>vim / neovim&lt;/strong> (recommended): A highly configurable text editor.&lt;/li>
&lt;/ul>
&lt;p>If you prefer a video, check out: &lt;a href="https://www.youtube.com/watch?v=56LAmHdxNTs"target="_blank" rel="noopener">Useful Shell Functions for Developers on Youtube&lt;/a>&lt;/p></description></item><item><title>Assume Positive Intent and Build Trust</title><link>https://2kabhishek.github.io/blog/assume-positive-intent/</link><pubDate>Fri, 13 Sep 2024 00:00:00 +0000</pubDate><author>iam2kabhishek@gmail.com (2KAbhishek)</author><guid>https://2kabhishek.github.io/blog/assume-positive-intent/</guid><description>&lt;p>As we continue working closely with clients, we often find ourselves in situations where we make recommendations that we believe to be in the best interest of the project.
However, it&amp;rsquo;s not uncommon to face pushbacks.
When this happens, it&amp;rsquo;s crucial to &lt;strong>&amp;ldquo;Assume Positive Intent.&amp;rdquo;&lt;/strong> This mindset is essential in navigating these challenges effectively.&lt;/p>
&lt;h2 id="why-assume-positive-intent">Why Assume Positive Intent?&lt;/h2>
&lt;p>When someone pushes back against an idea or suggestion, it&amp;rsquo;s easy to misinterpret their actions as being driven by personal motives like spite or a lack of trust.
However, it&amp;rsquo;s far more productive to assume that they are not acting out of negativity.
The person pushing back could be influenced by several factors:&lt;/p></description></item><item><title>Pending Code Reviews Are Blockers for Your Team 🚧</title><link>https://2kabhishek.github.io/blog/pending-code-reviews/</link><pubDate>Fri, 09 Aug 2024 00:00:00 +0000</pubDate><author>iam2kabhishek@gmail.com (2KAbhishek)</author><guid>https://2kabhishek.github.io/blog/pending-code-reviews/</guid><description>&lt;p>I&amp;rsquo;ve worked and interacted with a lot of people working in engineering teams across various contexts, and one of the most common pain points I&amp;rsquo;ve encountered is the prolonged wait time for code reviews.&lt;/p>
&lt;p>Long delays in code reviews can cause several issues:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Slower Delivery Pipeline 🐢&lt;/strong>&lt;/p>
&lt;p>When reviews are delayed, the overall progress of the project is hindered, affecting delivery timelines.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Idle Time and Context Switching 🦥&lt;/strong>&lt;/p>
&lt;p>Developers either move on to new tasks or, worse, sit idle waiting for reviews. When feedback finally arrives, they must context switch, which disrupts their flow and reduces productivity.&lt;/p></description></item><item><title>Keybindings FTW! ⌨️🥂</title><link>https://2kabhishek.github.io/blog/keybindings/</link><pubDate>Sun, 07 Jul 2024 00:00:00 +0000</pubDate><author>iam2kabhishek@gmail.com (2KAbhishek)</author><guid>https://2kabhishek.github.io/blog/keybindings/</guid><description>&lt;p>Keybindings or keyboard shortcuts are essential to an efficient workflow.
They help you navigate faster, be more productive and reduce the time you spend on repetitive tasks.&lt;/p>
&lt;p>My workflow is heavily keyboard driven and primmarily relies on a browser and a terminal within a tiling window manager, for these I use my own set of keybindings. Because I work on multiple machines and operating systems, I have to keep track of all the keybindings I use and make sure they are somewhat consistent across all the systems and tools.&lt;/p></description></item><item><title>How I organize my zsh config 🐚📂</title><link>https://2kabhishek.github.io/blog/how-i-organize-my-zsh-config/</link><pubDate>Sat, 25 May 2024 00:00:00 +0000</pubDate><author>iam2kabhishek@gmail.com (2KAbhishek)</author><guid>https://2kabhishek.github.io/blog/how-i-organize-my-zsh-config/</guid><description>&lt;p>I have been using zsh as my shell for over 6 years now.
During this time, I&amp;rsquo;ve experimented with various configurations and setups, and I&amp;rsquo;ve finally settled on one that I like.
In this post, I will discuss how I organize my zsh config and how you can do it too.&lt;/p>
&lt;p>If you want a longer video version, check you &lt;a href="https://youtu.be/Zuw3xZIDAKo"target="_blank" rel="noopener">ZSH Deep Dive&lt;/a>&lt;/p>
&lt;p>Let&amp;rsquo;s get started.&lt;/p>
&lt;h2 id="config-structure">Config Structure&lt;/h2>
&lt;p>Before diving into the config files, let&amp;rsquo;s examine the structure of my config directory:&lt;/p></description></item><item><title>win2k - Ultimate Dev Setup for Windows 🪟🪄</title><link>https://2kabhishek.github.io/blog/win2k-ultimate-dev-setup-for-windows/</link><pubDate>Sun, 29 Jan 2023 00:00:00 +0000</pubDate><author>iam2kabhishek@gmail.com (2KAbhishek)</author><guid>https://2kabhishek.github.io/blog/win2k-ultimate-dev-setup-for-windows/</guid><description>&lt;p>Do you find the Windows dev environment lacking? Do you miss your precious CLI tools on Windows?&lt;/p>
&lt;p>Well I felt the same way too. That&amp;rsquo;s why I combined a package manager, a powerful CLI editor, tiling window management and lots of other tools in a easy to set up solution.&lt;/p>
&lt;h1 id="introducing-win2khttpsgithubcom2kabhishekwin2k">Introducing &lt;a href="https://github.com/2KAbhishek/win2k"target="_blank" rel="noopener">win2k&lt;/a>&lt;/h1>
&lt;p>&lt;a target="_blank" rel="noopener noreferrer"
href="https://raw.githubusercontent.com/2kabhishek/win2k/main/images/screenshot.png">&lt;img loading="lazy" src="https://raw.githubusercontent.com/2kabhishek/win2k/main/images/screenshot.png" width="100%" height="auto"
alt="win2k screenshot"/>&lt;/a>&lt;/p>
&lt;p>win2k is a set of handcrafted configs for setting up a complete dev environment on Windows.&lt;/p></description></item><item><title>tmux-tilit - better tiling for tmux 🪟🪓</title><link>https://2kabhishek.github.io/blog/tmux-tilit-better-tiling-for-tmux/</link><pubDate>Wed, 11 Jan 2023 00:58:00 +0530</pubDate><author>iam2kabhishek@gmail.com (2KAbhishek)</author><guid>https://2kabhishek.github.io/blog/tmux-tilit-better-tiling-for-tmux/</guid><description>&lt;p>If you have used tmux then you already know that tmux provides ways to create multiple panes on your terminal among many other things.&lt;/p>
&lt;p>You might have also felt that the default way of doing these things is kind of clumsy and doesn&amp;rsquo;t feel natural.&lt;/p>
&lt;h1 id="introducing-tmux-tilithttpsgithubcom2kabhishektmux-tilit">Introducing &lt;a href="https://github.com/2KAbhishek/tmux-tilit"target="_blank" rel="noopener">tmux-tilit&lt;/a>:&lt;/h1>
&lt;p>&lt;a target="_blank" rel="noopener noreferrer"
href="https://raw.githubusercontent.com/2kabhishek/tmux-tilit/main/images/screenshot.jpg">&lt;img loading="lazy" src="https://raw.githubusercontent.com/2kabhishek/tmux-tilit/main/images/screenshot.jpg" width="100%" height="auto"
alt="tmux-tilit screenshot"/>&lt;/a>&lt;/p>
&lt;h2 id="what-is-this">What is this&lt;/h2>
&lt;p>&lt;a href="https://github.com/2KAbhishek/tmux-tilit"target="_blank" rel="noopener">tmux-tilit&lt;/a> is a tmux plugin that adds tiling window manager like features and keybindings to tmux.&lt;/p>
&lt;h2 id="inspiration">Inspiration&lt;/h2>
&lt;p>tmux-tilit was inspired by &lt;a href="https://github.com/jabirali/tmux-tilish"target="_blank" rel="noopener">tmux-tilish&lt;/a>.
I wanted to add some new commadns, make the keybindings match better with tmux&amp;rsquo;s defaults, hence tilit was born!&lt;/p></description></item></channel></rss>