<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Career on 2KAbhishek Blogs</title><link>https://2kabhishek.github.io/blog/tags/career/</link><description>Recent content in Career on 2KAbhishek Blogs</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>iam2kabhishek@gmail.com (2KAbhishek)</managingEditor><webMaster>iam2kabhishek@gmail.com (2KAbhishek)</webMaster><copyright>2KAbhishek</copyright><lastBuildDate>Mon, 14 Aug 2023 00:10:46 +0530</lastBuildDate><atom:link href="https://2kabhishek.github.io/blog/tags/career/index.xml" rel="self" type="application/rss+xml"/><item><title>How to Think Like an Architect 🧠🏛️</title><link>https://2kabhishek.github.io/blog/post/think-like-architect/</link><pubDate>Mon, 14 Aug 2023 00:10:46 +0530</pubDate><author>iam2kabhishek@gmail.com (2KAbhishek)</author><guid>https://2kabhishek.github.io/blog/post/think-like-architect/</guid><description>&lt;p&gt;Have you ever wondered what skills it takes to be a software architect?&lt;/p&gt;
&lt;p&gt;While civil architects design awe-inspiring structures that stand the test of time, software architects craft intricate architectures that form the foundation of modern technology. Software architects mold the digital landscape as we know it.&lt;/p&gt;
&lt;p&gt;Architects possess a unique mindset that enables them to design and develop robust software architectures. Their ability to think strategically, make informed decisions, and balance trade-offs is vital for creating successful systems.&lt;/p&gt;
&lt;p&gt;In this article, we dive deep into key principles and strategies that will help you train your brain to think like an architect.&lt;/p&gt;
&lt;h2 id="the-first-law-of-software-architecture-everything-is-a-trade-off"&gt;The First Law of Software Architecture: Everything is a Trade-off&lt;/h2&gt;
&lt;p&gt;The foundation of architectural thinking lies in understanding that everything in software architecture involves trade-offs.
Architectural decisions require careful consideration of competing factors, such as&lt;/p&gt;</description></item><item><title>Data Structure and Algorithms are Overrated! 🚫🪴</title><link>https://2kabhishek.github.io/blog/post/dsa-is-overrated/</link><pubDate>Fri, 28 Oct 2022 00:10:46 +0530</pubDate><author>iam2kabhishek@gmail.com (2KAbhishek)</author><guid>https://2kabhishek.github.io/blog/post/dsa-is-overrated/</guid><description>&lt;h2 id="-dsa-is-overrated-"&gt;🚫 DSA is OVERRATED!! 🚫&lt;/h2&gt;
&lt;p&gt;I recently saw some posts on LinkedIn and Twitter about how a 1% decrease in load time increased revenues for a company.&lt;/p&gt;
&lt;p&gt;Sure, I agree, we all want fast software. 🚀&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the thing though,
One can build fast and robust software without spending 1000 hours on Data Structure and Algorithms. ✨&lt;/p&gt;
&lt;p&gt;Believing that crazy DSA skills are needed for optimizing software is just not right, any good developer will look at 20 other things before even thinking about runtime complexity.&lt;/p&gt;
&lt;p&gt;Sure the skills you learn from slogging DSA for hundreds of hours will help you write better software, but is spending all of that time really worth it? 🤔&lt;/p&gt;
&lt;p&gt;It just doesn&amp;rsquo;t make sense to have your potential teammate spend so much time on something that a $10 Copilot license or a quick Google search can do for you.&lt;/p&gt;</description></item></channel></rss>